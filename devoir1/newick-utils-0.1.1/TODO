[later] Add functionality for reducing stair nodes.

[later] Add functionality for directly counting a bipartition from a set of
replicates.  This would look like: $ nw_bipart <reps> leaf1 ... leafn where a
bipartition will be computed from the leaf labels, and its frequency printed
out as output.

[later] nw_ed should be able to visit the tree in reverse order, and to flag
nodes for no further processing (if they meet the condition or if their parent
is flagged), like in the Ruby version.

[done] Valgrind nw_clade

[done] Although a tree without labels like '((,),);' is valid Newick, the
parser rejects it.

[done] nw_ed has problems when deleting a node (try valgrind nw_ed
data/HRV_bs.nw 'i & b == 13' d). The illegal write happens when destroying a
list that is apparently not correctly terminated, i.e. l->count == 1 but
l->head->next is not NULL as it should be. I'm not sure exactly when this
occurs yet (destroy_llist() is used frequently).

[done] bug in nw_reroot: try nw_reroot -l data/reroot_l_prob.nw
CL-****2_3DCL-1243049_3D. It should work, or at least print a message.  

[done] Use a struct hash instead of a struct node_map. Eventually remove
nodemap.[ch] -- Note: kept nodemap.c for its functionality, but now it uses a
hash.

[done] Add functionality for monophyly in nw_clade. This means that we'll have
to be able to list the (leaf) descendants of an LCA, and compare this set to
the list of labels passed as arguments on the command line. For this, I'll
implement a depth-first traversal of the tree, given a root. This may also be
used for creating a struct rooted_tree (rather than just a root node): the
depth-first traversal can be used to generate an ordered nodes list.

[done] Add an option (-p) to nw_bipart so it prints out percentages instead of
absolute frequencies. 

[done] nw_labels: output labels, in columns or on a line, in parse order.
Options for omitting leaves or inners.

[done] SVG for nw_display. The concept of color maps for LCA's (cf Ruby
version) should be integrated from the start. Due to the impossibility of
predicting SVG text's dimensions, the horizontal space requirements are
sometimes miscalculated. Add an option to override it.

[done] nw_distance: output distances from root or LCA as a table, or between
leaves as a matrix.

[done] nw_prune: remove nodes from a tree. 

[done] nw_display: SVG mode is now hybrid in the sense that some node data
(vertical and horizontal position) are stored in a node_pos structure
attributed to rnode->data, while others (color, for now) are stored in a
rnode-indexed hash.  This hybrid state is not desirable. I need to decide if I
want all-hash or all-node-data. I think that the latter is best (should be
quicker, doesn't need the additional data structure and assorted memory
management), but then I'll have to duplicate the code that fills the data. This
is because currently I use the same functions (alloc_node_pos(),
set_node_vpos(), and set_node_depth()) as for the text display and for
nw_distance (these two apps don't require anything more than positions). If I
want to store all node data for SVG display in a structure, I'll need a new
structure with SVG-specific members in addition to horizontal and vertical
positions. This structure cannot be passed to the above functions, so I'll have
to make SVG-specific clones of them. This is where I miss OO, where I could
have used an abstract class. Let's let this rest for a while. Ok, finally I
implemented a solution based on callbacks. There is a pair of functions for
computing node positions (see node_pos_alloc.h), these functions are passed
pointers to functions that set and get data for an rnode. This uncouples the
_computing_ of node positions from the _storage_ of node positions, and allows
programs to use the same code for computing (no code duplication) while storing
the info in different ways (no need to use the same structures, etc).

[done] nw_order: sort tree nodes by some criterion. Include at least
alphabetical sorting of labels. Might include other criteria like tree depth,
etc, if these are of any use.

[done] list.c: add a void * to_array(struct llist *) function. This can be used
for sorting the children of a node using qsort(). We should also provide the
reverse function, array_to_list(). [NOTE: I previously thought that iterating
over arrays would be faster than over lists, but this turns out not to be the
case (see src/test_loops)].

[done] add some error messages in newick parser (better than just "syntax
error"). One case I encountered was two consecutive labels (in fact there was a
spurious space between them). Something could be done, such as fusing them with
a '_', or dropping all but the first; at the very least the program should say
what the problem was and where it was found. -- Note: to detect incorrect constructs, I introduced "wrong" cases in the grammar, as suggested in the Lex & Yacc book. This causes conflicts in the grammar, but I decided to keep it that way, since i) Bison solves the conflicts correctly, and ii) the "correct" grammar (the one that only recognizes correct trees) is perfectly non-ambiguous.

[done] nw_topology: also remove length of root's parent edge, if it has one
(like when it is extracted from another tree).

[done] Modify nw_display so that cladograms can be printed with leaves aligned.
Any tree with no branch length information will be considered a cladogram,
otherwise it will be considered a phylogram/phenogranm and lengths will be
honored (any missing lengths, in that case, will be set to 1). Note that an
ultrametric tree such as made by UPGMA will also have leaves aligned, but this
will be dictated by branch lengths, not by a decision to align leaves. Aligning
leaves should be the default behaviour for cladograms.

[done] Add all examples from the Newick definition page
(http://evolution.genetics.washington.edu/phylip/newicktree.html) to the test
suite.

[done] nw_display: replace underscores by spaces, as underscores are a way to introduce spaces where they are normally not allowed. The transformation is only done in nw_display, not in the parser: this way the labels are always valid Newick.

[done] nw_bipart: invert order of arguments: 'target' newick tree mus be first.

[done] parser: the '+' character causes a syntax error. This should not be the
case, as every printable char except ()[]:,; is legal in labels. Also confuses
lexer, so fix it too while we're at it.

[done] all: add help, available with option -h (program should then quit successfully).

[done] BUG: nw_ed crashes on cladograms when trying to splice out nodes. Fixed
- that was because new edge lengths were not malloc()ed when both lengths were
empty.

[done] nw_display: make one SVG group with tree branches, and another with text

[done] nw_display: add functionality for circular trees

[done] nw_display: check the 'null' values (try colormaps). Add a test for every
option.

[done] nw_clade: add functionality for returning sibling, based on one or more labels.

